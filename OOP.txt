A constructor is a special type of member function that is called automatically when an object is created.
Parameterized Constructor: a constructor with parameters is known as a parameterized constructor. This is the preferred method to initialize member data.
A constructor is primarily used to initialize objects. They are also used to run a default code when an object is created.
Class members means any variable or function inside the class is called "Member".
Every Object has it's own space in memory that holds only Data Members.
Function Members are shared to all objects in memory and has one space for them.
Properties are Functions allow you to Update Private Members inside the class.
Properties are two functions one for Setting Data and One for getting Data.
In normal terms Encapsulation is defined as wrapping up of data and information under a single unit. In Object Oriented Programming, Encapsulation is defined as binding together the data and the functions that manipulates them.
In simple terms, abstraction “displays” only the relevant attributes of objects and “hides” the unnecessary details.
tilde (~) This is destructor will be called when object is destroyed.
Destructor is an instance member function which is invoked automatically whenever an object is going to be destroyed. Meaning, a destructor is the last function that is going to be called before an object is destroyed.
The destructor is only one way to destroy the object create by constructor. Hence destructor can-not be overloaded.
Static Member is a variable that is shared for all objects, any object modifies it it get modified for all other objects.
Static members are on the class level not for each object.
Static Functions can be called at class level without a need to have an object.
Inheritance: Inheritance is one in which a new class is created that inherits the properties of the already exist class. It supports the concept of code reusability and reduces the length of the code in object-oriented programming.
The class that inherits properties from another class is called Subclass or Derived Class
The class whose properties are inherited by a subclass is called Base Class or Superclass.
Derived Class and Sub Class are the same.
Base Class and Super Class are the same
Access modifiers (or access specifiers) are keywords in object-oriented languages that set the accessibility of classes, methods, and other members.
Visibility Mode "Private" will make everything private in the derived class, so it can make use of it and no one will make use of it neither derived classes nor objects.
Visibility Mode "Protected" will make everything protected in the derived class, so it can make use of it and all other derived classes will make use of it, but no objects will make use of it.
Visibility Mode "Public" will inherit the class publicly so every public members and protected members are useful for others.
types of Inheritance
    Single inheritance
    Multi-level inheritance
    Multiple inheritance
    Hybrid inheritance
    Hierarchical inheritance

Up Casting is converting derived object to it's base object
A pointer of type parent can point to an object of child class.
Static Binding: The binding which can be resolved at compile time by the compiler is known as static or early binding. The binding of all the static, private methods is done at compile-time.
Dynamic Binding: In Dynamic binding compiler doesn’t decide the method to be called. Overriding is a perfect example of dynamic binding. In overriding both parent and child classes have the same method.
Early Binding / Static Binding are done at the compilation time.
Late Binding/Dynamic Binding are done at run time.
Polymorphism allows us to create consistent code.
Polymorphism is one of the important features/principles/concepts of OOP, word Ploy means "Many" and word Morphism means "Form" so it means "Many Forms", the ability to take more than one form.
We can achieve Polymorphism through
    Function Overloading
    Operator Overloading
    Overriding
    Virtual Methods

A pure virtual function doesn't have the function body and it must end with = 0.
If you have one pure virtual function in a class then it will be converted to abstract class.
Abstract Class is the same concept of Interface Class and they are both contracts.
Abstract Class/Interface Class is a class with pure virtual functions.
An abstract class in C++ has at least one pure virtual function by definition. In other words, a function that has no definition.
The C++ interfaces are implemented using abstract classes and these abstract classes should not be confused with data abstraction which is a concept of keeping implementation details separate from associated data.
A friend class can access both private and protected members of the class in which it has been declared as friend.
The friend function is declared using the friend keyword inside the body of the class.
By using the keyword, the ‘friend’ compiler understands that the given function is a friend function.
Every object in C++ has access to its own address through an important pointer called this pointer.
The this pointer is an implicit parameter to all member functions.
Therefore, inside a member function, this may be used to refer to the invoking object.
Friend functions do not have a this pointer, because friends are not members of a class. Only member functions/member data have a this pointer.


















































